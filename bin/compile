#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
OPT_DIR=$(cd $BIN_DIR/../opt; pwd)

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=$(cd $(dirname $0); cd ..; pwd)

# Fix leak
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $BP_DIR/bin/common.sh

# Output npm debug info on error
# trap cat_npm_debug_log ERR

echo ""
# Look in package.json's engines.node field for a semver range
semver_range=$(cat $BUILD_DIR/client/package.json | $BP_DIR/vendor/jq -r .engines.node)

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  node_protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  node_protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  node_protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  node_status "Defaulting to latest stable node: $node_version"
else
  node_status "Requested node range:  $semver_range"
  node_status "Resolved node version: $node_version"
fi

# Download node from Heroku's S3 mirror of nodejs.org/dist
node_status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $BUILD_DIR

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor
mv $BUILD_DIR/node-v$node_version-linux-x64 $BUILD_DIR/vendor/node
chmod +x $BUILD_DIR/vendor/node/bin/*
PATH=$BUILD_DIR/vendor/node/bin:$PATH

GRADLE_TASK=${GRADLE_TASK-stage}
echo "GRADLE_TASK=${GRADLE_TASK-stage}"

JVM_COMMON_BUILDPACK=http://lang-jvm.s3.amazonaws.com/jvm-buildpack-common-v3.tar.gz
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

export_env_dir $ENV_DIR

# create default system.properties
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}... "
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

export GRADLE_USER_HOME=$CACHE_DIR/.gradle

if [ ! -f $BUILD_DIR/gradlew ] ; then
  echo "-----> Installing Gradle Wrapper..."
  echo "       WARNING: Your application does not have it's own gradlew file."
  echo "       We'll install one for you, but this is a deprecated feature and"
  echo "       in the future may not be supported."
  cp -rn ${OPT_DIR}/wrapper/* ${BUILD_DIR}
fi
BUILDCMD="./gradlew"
chmod +x ${BUILD_DIR}/gradlew

BUILDCMD="$BUILDCMD --debug --stacktrace $GRADLE_TASK"

cd $BUILD_DIR

# build app
echo "-----> Building Gradle app..."
echo "       WARNING: The Gradle buildpack is currently in Beta."
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app"
  exit 1
fi

PROFILE_PATH="$BUILD_DIR/.profile.d/gradle.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="/app/.jdk/bin:$PATH"' >> $PROFILE_PATH
